@page "/managedSecrets"

<DisplayHeading Size="DisplayHeadingSize.Is4">Managed Secrets</DisplayHeading>

<BlazorTable.Table TableItem="ManagedSecretViewModel"
                   TableClass="table table-striped table-bordered"
                   @bind-Items="@Secrets">

    <!-- Controls/ID -->
    <BlazorTable.Column TableItem="ManagedSecretViewModel"
                        Title="" Field="@(x => x.ObjectId)"
                        Width="1%"
                        Sortable="false" Filterable="false">
        <Template>
            <Blazorise.Buttons Role="ButtonsRole.Toolbar">
                <Blazorise.Button Class="fa rolling"
                                  data-action="View" Color="Color.Info"
                                  Clicked="@(() => NavigationManager.NavigateTo($"/aj/managedSecrets/{context.ObjectId}"))">
                    <Icon Name="FontAwesomeIcons.Eye" Class="text-light" />
                </Blazorise.Button>
                <Blazorise.Button Color="Color.Danger" Clicked="@(() => { SelectedValue = context; DeleteModalShowing = true; })">
                    <Icon Name="FontAwesomeIcons.Trash" Class="text-light" />
                </Blazorise.Button>
            </Blazorise.Buttons>
        </Template>
    </BlazorTable.Column>

    <!-- Confirmations -->
    <BlazorTable.Column TableItem="ManagedSecretViewModel"
                        Title="Confirmations" Field="@(x => x.TaskConfirmationStrategies)"
                        Width="1%"
                        Sortable="true" Filterable="true">
        <Template>
            <ApprovalTypeComponent @bind-Value="@context.TaskConfirmationStrategies" ShowEditControls="false" />
        </Template>
    </BlazorTable.Column>

    <!-- Valid Period -->
    <BlazorTable.Column TableItem="ManagedSecretViewModel"
                        Title="Valid For" Field="@(x => x.ValidPeriodMinutes)"
                        Sortable="true">
        <Template>
            <TimespanComponent @bind-Value="@context.ValidPeriodMinutes" ShowEditControls="false" />
        </Template>
    </BlazorTable.Column>

    <!-- Expiry -->
    <BlazorTable.Column TableItem="ManagedSecretViewModel"
                        Title="Expiry" Field="@(x => x.Expiry)"
                        Sortable="true" Filterable="true" />

    <!-- Resources -->
    <BlazorTable.Column TableItem="ManagedSecretViewModel"
                        Title="Resources">
        <Template>
            <ListGroup Margin="Margin.Is0.OnAll" Padding="Padding.Is0.OnAll">
                @foreach (var resource in context.Resources)
                {
                    <ListGroupItem Padding="Padding.Is2.OnAll"
                                   Class="@(resource.IsRekeyableObjectProvider ? "border-left-primary" : "border-left-secondary")">
                        <ResourceNameStyled Value="@resource" />
                    </ListGroupItem>
                }
            </ListGroup>
        </Template>
    </BlazorTable.Column>

    <!-- Pager -->
    <BlazorTable.Pager ShowPageNumber="true" ShowTotalCount="true" />
</BlazorTable.Table>

<Blazorise.Button Size="ButtonSize.Large" Color="Color.Primary" Clicked="@CreateNew">
    <Icon Name="FontAwesomeIcons.Plus" Margin="Margin.Is2.FromRight" IconStyle="IconStyle.Solid" />
    Create New Managed Secret
</Blazorise.Button>

<DataModal @bind-Visible="@CreateModalShowing"
           Title="Create New Managed Secret"
           YesButton="Create"
           NoButton="Cancel"
           ResultClicked="@CreateCallback">
    <ManagedSecretEditor @bind-Value="@SelectedValue" />
</DataModal>
<DeleteConfirmationModal @bind-Visible="@DeleteModalShowing"
                         ObjectId="@SelectedValue.ObjectId"
                         ObjectName="@SelectedValue.Name"
                         ResultClicked="@DeleteConfirmCallback" />

@using AuthJanitor.Automation.Components.Editors
@using AuthJanitor.Automation.Components.Modals
@using AuthJanitor.Automation.Components.Common.Resources
@using AuthJanitor.Automation.Components.Common.Secrets
@code {
    protected IEnumerable<ManagedSecretViewModel> Secrets { get; set; } = new List<ManagedSecretViewModel>();

    protected bool CreateModalShowing { get; set; }
    protected bool DeleteModalShowing { get; set; }

    [Parameter]
    public ManagedSecretViewModel SelectedValue { get; set; } = new ManagedSecretViewModel();

    [Parameter]
    public EventCallback<ManagedSecretViewModel> SelectedValueChanged { get; set; }

    protected override Task OnInitializedAsync() => LoadData();

    protected async Task LoadData() => Secrets = await Http.AJList<ManagedSecretViewModel>();

    protected void CreateNew()
    {
        SelectedValue = new ManagedSecretViewModel();
        CreateModalShowing = true;
    }

    protected async Task CreateCallback(bool result)
    {
        if (result)
        {
            await Http.AJCreate<ManagedSecretViewModel>(SelectedValue);
            await LoadData();
        }
        CreateModalShowing = false;
    }

    protected async Task DeleteConfirmCallback(bool result)
    {
        if (result)
        {
            await Http.AJDelete<ManagedSecretViewModel>(SelectedValue.ObjectId);
            await LoadData();
        }
        DeleteModalShowing = false;
    }
}
