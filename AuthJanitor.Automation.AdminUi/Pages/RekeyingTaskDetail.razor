@page "/rekeyingTasks/{RekeyingTaskId}"

<Container IsFluid="true">
    <Row Margin="Margin.Is4.FromBottom">
        <Column ColumnSize="ColumnSize.Is8">
            <Card>
                <CardHeader Padding="Padding.Is2.OnY">
                    <Heading Size="HeadingSize.Is5" Class="font-weight-bold" Margin="Margin.Is0">Managed Secret Detail</Heading>
                </CardHeader>
                <CardBody>
                    <Heading Size="HeadingSize.Is6" Class="font-weight-bold">ID<span class="float-right text-muted">@Secret.ObjectId</span></Heading>
                    <Heading Size="HeadingSize.Is6" Class="font-weight-bold">Current Nonce<span class="float-right text-muted">@Secret.Nonce</span></Heading>
                    <Heading Size="HeadingSize.Is6" Class="font-weight-bold">Name<span class="float-right text-muted">@Secret.Name</span></Heading>
                    <Heading Size="HeadingSize.Is6" Class="font-weight-bold">Providers<span class="float-right text-muted">@Secret.ProviderSummary</span></Heading>
                    <Heading Size="HeadingSize.Is6" Class="font-weight-bold">Last Changed<span class="float-right text-muted">@Secret.LastChanged</span></Heading>
                    <Heading Size="HeadingSize.Is6" Class="font-weight-bold">Expires<span class="float-right text-muted">@Secret.Expiry</span></Heading>

                    @{
                        Background barColor;
                        if (Secret.ExpiryPercent > 90) barColor = Background.Danger;
                        else if (Secret.ExpiryPercent > 75) barColor = Background.Warning;
                        else barColor = Background.Success;
                    }

                    <Progress Margin="Margin.Is3.FromBottom">
                        <ProgressBar Background="@barColor" Value="@Secret.ExpiryPercent">
                            @if (Secret.IsValid)
                            {
                                @((DateTimeOffset.Now - Secret.LastChanged).GetValueOrDefault().ToReadableString(true))
                            }
                            else
                            {
                                @("Expired for " + (DateTimeOffset.Now - Secret.LastChanged).GetValueOrDefault().ToReadableString(true))
                            }
                        </ProgressBar>
                    </Progress>

                    <Heading Size="HeadingSize.Is6" Class="font-weight-bold">
                        Rotation Confirmations
                        <span class="float-right">
                            <ConfirmationStrategiesComponent @bind-Value="@Secret.TaskConfirmationStrategies" />
                        </span>
                    </Heading>
                </CardBody>
            </Card>
        </Column>
        <Column ColumnSize="ColumnSize.Is4">
            <Buttons Orientation="Orientation.Vertical">
                <Blazorise.Button IsDisabled="!Secret.TaskConfirmationStrategies.HasFlag(TaskConfirmationStrategies.AdminCachesSignOff) &&
                                                   !Secret.TaskConfirmationStrategies.HasFlag(TaskConfirmationStrategies.AdminSignsOffJustInTime)"
                                  Color="Color.Primary">Create Rekeying Task</Blazorise.Button>
                <Blazorise.Button Color="Color.Danger">Delete Managed Secret</Blazorise.Button>
            </Buttons>
        </Column>
    </Row>
    <Row>
        <Column ColumnSize="ColumnSize.Is12">
            <Accordion>
                @for (var i = 0; i < Secret.Resources.Count(); i++)
                {
                    var resource = Secret.Resources.ToArray()[i];
                    <Card>
                        <CardHeader>
                            <Button Clicked="@(() => PutVisibility(resource.ObjectId, !GetVisibility(resource.ObjectId)))">
                                <ResourceNameComponent @bind-Value="@resource" ShowRiskScore="false" />
                            </Button>
                            <RiskScorePillComponent Value="@resource.RiskScore" Float="Float.Right" Class="mt-2" />
                        </CardHeader>
                        <Collapse IsOpen="@GetVisibility(resource.ObjectId)">
                            <CardBody Padding="Padding.Is2.OnAll">
                                <Container IsFluid="true" Padding="Padding.Is0.OnAll">
                                    <Row Margin="Margin.Is3.FromBottom">
                                        <Column>
                                            <Card>
                                                <CardHeader Padding="Padding.Is1.OnY">
                                                    <Heading Size="HeadingSize.Is5" TextColor="TextColor.Info" Margin="Margin.Is0.OnAll" Class="font-weight-bold">Settings</Heading>
                                                </CardHeader>
                                                <CardBody Padding="Padding.Is0">
                                                    <ProviderSettingsComponent @bind-Value="@resource.ProviderConfiguration" />
                                                </CardBody>
                                            </Card>
                                        </Column>
                                        <Column>
                                            <Card Margin="Margin.Is2.FromBottom">
                                                <CardHeader Padding="Padding.Is1.OnY">
                                                    <Heading Size="HeadingSize.Is5" TextColor="TextColor.Warning" Margin="Margin.Is0.OnAll" Class="font-weight-bold">Risks</Heading>
                                                </CardHeader>
                                                <CardBody Padding="Padding.Is1">
                                                    <RiskListGroupComponent @bind-Value="@resource.Risks" />
                                                </CardBody>
                                            </Card>
                                            <Card>
                                                <CardHeader Padding="Padding.Is1.OnY">
                                                    <Heading Size="HeadingSize.Is5" TextColor="TextColor.Info" Margin="Margin.Is0.OnAll" Class="font-weight-bold">Action Description</Heading>
                                                </CardHeader>
                                                <CardBody>
                                                    @if (string.IsNullOrEmpty(resource.RuntimeDescription))
                                                    {
                                                        <code>Provider does not describe its actions!</code>
                                                    }
                                                    else
                                                    {
                                                        <code>@resource.RuntimeDescription</code>
                                                    }
                                                </CardBody>
                                            </Card>
                                        </Column>
                                    </Row>
                                </Container>
                            </CardBody>
                        </Collapse>
                    </Card>
                }
            </Accordion>
        </Column>
    </Row>

    <Row>
        @{_selectedTab = HelperMethods.MD5HashString(
            Task.Attempts.OrderByDescending(a => a.AttemptStarted).FirstOrDefault()?.AttemptStarted.ToString());}
        <Tabs SelectedTabChanged="@OnSelectedTabChanged">
            @foreach (var attempt in Task.Attempts)
        {
            <Tab Name="@HelperMethods.MD5HashString(attempt.AttemptStarted.ToString())"
                 IsActive="@(HelperMethods.MD5HashString(attempt.AttemptStarted.ToString()) == _selectedTab)">
                @if (attempt.IsSuccessfulAttempt) {
                    <Icon Name="FontAwesomeIcons.CheckCircle" Class="text-success" />
                } else {
                    <Icon Name="FontAwesomeIcons.TimesCircle" Class="text-danger" />
                }
                @attempt.UserDisplayName<br />
                <small>@attempt.AttemptStarted.ToString()</small>
            </Tab>
        }
        </Tabs>
        <TabsContent @ref="attemptTabs">
            @foreach (var attempt in Task.Attempts)
        {
            <TabPanel Name="@HelperMethods.MD5HashString(attempt.AttemptStarted.ToString())" 
                      IsActive="@(HelperMethods.MD5HashString(attempt.AttemptStarted.ToString()) == _selectedTab)">
                <pre><code>@attempt.LogString</code></pre>
                @if (!attempt.IsSuccessfulAttempt)
                {
                    <pre class="border border-danger"><code>@attempt.OuterException</code></pre>
                }
            </TabPanel>
        }
        </TabsContent>
    </Row>
</Container>

@using AuthJanitor.Automation.AdminUi.Components.Resources
@using AuthJanitor.Automation.AdminUi.Components.Risks
@using AuthJanitor.Automation.AdminUi.Components.Secrets
@using AuthJanitor.Automation.Shared.ViewModels
@using AuthJanitor.Providers
@code {
    public bool PutVisibility(Guid id, bool visible) => Visibilities[id] = visible;
    public bool GetVisibility(Guid id) => Visibilities.ContainsKey(id) ? Visibilities[id] : false;
    public Dictionary<Guid, bool> Visibilities { get; set; } = new Dictionary<Guid, bool>();

    public ManagedSecretViewModel Secret => Task == null ? new ManagedSecretViewModel() : Task.ManagedSecret;
    public RekeyingTaskViewModel Task { get; set; } = new RekeyingTaskViewModel();

    private TabsContent attemptTabs;

    [Parameter]
    public string RekeyingTaskId { get; set; }

    public TimeSpan DurationSoFar => DateTimeOffset.UtcNow - Secret.LastChanged.GetValueOrDefault();

    protected override async Task OnInitializedAsync()
    {
        Task = await Http.AJGet<RekeyingTaskViewModel>(Guid.Parse(RekeyingTaskId));
    }

    private string _selectedTab;
    private void OnSelectedTabChanged(string name)
    {
        _selectedTab = name;
        attemptTabs.SelectPanel(name);
    }
}