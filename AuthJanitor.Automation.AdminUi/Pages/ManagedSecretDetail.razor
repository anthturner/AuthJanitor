@page "/managedSecrets/{SecretId}"

<Container IsFluid="true" Padding="Padding.Is0">
    <Row Margin="Margin.Is4.FromBottom">
        <Column ColumnSize="ColumnSize.Is8">
            <Card>
                <CardHeader>Managed Secret Detail</CardHeader>
                <CardBody>
                    <Heading Size="HeadingSize.Is6" Class="font-weight-bold">ID<span class="float-right text-muted">@Secret.ObjectId</span></Heading>
                    <Heading Size="HeadingSize.Is6" Class="font-weight-bold">Current Nonce<span class="float-right text-muted">@Secret.Nonce</span></Heading>
                    <Heading Size="HeadingSize.Is6" Class="font-weight-bold">Name<span class="float-right text-muted">@Secret.Name</span></Heading>
                    <Heading Size="HeadingSize.Is6" Class="font-weight-bold">Providers<span class="float-right text-muted">@Secret.ProviderSummary</span></Heading>
                    <Heading Size="HeadingSize.Is6" Class="font-weight-bold">Last Changed<span class="float-right text-muted">@Secret.LastChanged</span></Heading>
                    <Heading Size="HeadingSize.Is6" Class="font-weight-bold">Expires<span class="float-right text-muted">@Secret.Expiry</span></Heading>

                    @{
                        Background barColor;
                        if (Secret.ExpiryPercent > 90) barColor = Background.Danger;
                        else if (Secret.ExpiryPercent > 75) barColor = Background.Warning;
                        else barColor = Background.Success;
                    }

                    <Progress Margin="Margin.Is3.FromBottom">
                        <ProgressBar Background="@barColor" Value="@Secret.ExpiryPercent">
                            @if (Secret.IsValid)
                            {
                                @((DateTimeOffset.Now - Secret.LastChanged).GetValueOrDefault().ToReadableString(true))
                            }
                            else
                            {
                                @("Expired for " + (DateTimeOffset.Now - Secret.LastChanged).GetValueOrDefault().ToReadableString(true))
                            }
                        </ProgressBar>
                    </Progress>

                    <Heading Size="HeadingSize.Is6" Class="font-weight-bold">
                        Rotation Confirmations
                        <span class="float-right">
                            <ApprovalTypeComponent @bind-Value="@Secret.TaskConfirmationStrategies" />
                        </span>
                    </Heading>
                </CardBody>
            </Card>
        </Column>
        <Column ColumnSize="ColumnSize.Is4">
            <Buttons Orientation="Orientation.Vertical">
                <Blazorise.Button IsDisabled="!Secret.TaskConfirmationStrategies.HasFlag(TaskConfirmationStrategies.AdminCachesSignOff) &&
                                                   !Secret.TaskConfirmationStrategies.HasFlag(TaskConfirmationStrategies.AdminSignsOffJustInTime)"
                                  Color="Color.Primary">Create Rekeying Task</Blazorise.Button>
                <Blazorise.Button Color="Color.Danger">Delete Managed Secret</Blazorise.Button>
            </Buttons>
        </Column>
    </Row>
    <Row>
        <Column ColumnSize="ColumnSize.Is12">
            <ResourceListCardAccordion Resources="@Secret.Resources" />
        </Column>
    </Row>
</Container>

@using AuthJanitor.Automation.Components.Cards 
@using AuthJanitor.Automation.Components.Common.Secrets
@using AuthJanitor.Automation.Shared.ViewModels
@using AuthJanitor.Providers
@code {
    public ManagedSecretViewModel Secret { get; set; } = new ManagedSecretViewModel();

    [Parameter]
    public string SecretId { get; set; }

    public TimeSpan DurationSoFar => DateTimeOffset.UtcNow - Secret.LastChanged.GetValueOrDefault();

    protected override async Task OnInitializedAsync()
    {
        Secret = await Http.AJGet<ManagedSecretViewModel>(Guid.Parse(SecretId));
    }
}