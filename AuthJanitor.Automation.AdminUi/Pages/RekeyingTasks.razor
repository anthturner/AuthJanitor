@page "/rekeyingTasks"

<DisplayHeading Size="DisplayHeadingSize.Is4">Rekeying Tasks</DisplayHeading>

<BlazorTable.Table TableItem="RekeyingTaskViewModel"
                   TableClass="table table-striped table-bordered"
                   @bind-Items="@Tasks">

    <!-- Controls/ID -->
    <BlazorTable.Column TableItem="RekeyingTaskViewModel"
                        Title="" Field="@(x => x.ObjectId)"
                        Width="1%"
                        Sortable="false" Filterable="false">
        <Template>
            <Blazorise.Buttons Role="ButtonsRole.Toolbar">
                <Blazorise.Button Color="Color.Info"
                                  Clicked="@(() => NavigationManager.NavigateTo($"/aj/rekeyingTasks/{context.ObjectId}"))">
                    <Icon Name="FontAwesomeIcons.Eye" Class="text-light" />
                </Blazorise.Button>
                <Blazorise.Button Color="Color.Success" Clicked="@(() => { SelectedValue = context; ApproveModalShowing = true; })">
                    <Icon Name="FontAwesomeIcons.CheckSquare" Class="text-light" />
                </Blazorise.Button>
                <Blazorise.Button Color="Color.Danger" Clicked="@(() => { SelectedValue = context; DeleteModalShowing = true; })">
                    <Icon Name="FontAwesomeIcons.Trash" Class="text-light" />
                </Blazorise.Button>
            </Blazorise.Buttons>
        </Template>
    </BlazorTable.Column>

    <!-- Queued Date -->
    <BlazorTable.Column TableItem="RekeyingTaskViewModel"
                        Title="Queued" Field="@(x => x.Queued)"
                        Sortable="true" Filterable="true" />

    <!-- Expiry Date -->
    <BlazorTable.Column TableItem="RekeyingTaskViewModel"
                        Title="Expiry" Field="@(x => x.Expiry)"
                        Sortable="true" Filterable="true" />

    <!-- Status -->
    <BlazorTable.Column TableItem="RekeyingTaskViewModel"
                        Title="Status" Field="@(x => x.RekeyingCompleted)">
        <Template>
            @if (context.RekeyingCompleted)
            {
                <Badge Color="Color.Success">Complete</Badge>
            }
            else if (!string.IsNullOrEmpty(context.RekeyingErrorMessage))
            {
                var attempt = context.Attempts.OrderByDescending(a => a.AttemptStarted).First();
                <Alert Color="Color.Danger" IsDismisable="false" IsShow="true">
                    <strong>Error Rekeying!</strong> (Last attempted @attempt.AttemptStarted by @attempt.UserDisplayName)
                </Alert>
            }
            else if (context.RekeyingInProgress)
            {
                <Badge Color="Color.Primary">In Progress</Badge>
            }
            else
            {
                <Badge Color="Color.Secondary">Scheduled</Badge>
            }
        </Template>
    </BlazorTable.Column>

    <!-- Participating Resources -->
    <BlazorTable.Column TableItem="RekeyingTaskViewModel" Title="Resources">
        <Template>
            <ListGroup Margin="Margin.Is0.OnX.Is1.OnY" Padding="Padding.Is0.OnAll">
                @foreach (var resource in context.ManagedSecret.Resources)
                {
                    <ListGroupItem Padding="Padding.Is2.OnAll">
                        <ResourceNameStyled Value="@resource" />
                    </ListGroupItem>
                }
            </ListGroup>
        </Template>
    </BlazorTable.Column>

    <!-- Pager -->
    <BlazorTable.Pager ShowPageNumber="true" ShowTotalCount="true" />
</BlazorTable.Table>

<DataModal @bind-Visible="@ApproveModalShowing"
           Title="Approve Task"
           YesButton="Approve"
           NoButton="Cancel"
           ResultClicked="@ApproveCallback">
    <ApprovalSummary Task="@SelectedValue" />
</DataModal>
<DeleteConfirmationModal @bind-Visible="@DeleteModalShowing"
                         ObjectId="@SelectedValue.ObjectId"
                         ObjectName="@SelectedValue.ObjectId.ToString()"
                         ResultClicked="@DeleteConfirmCallback" />

@using AuthJanitor.Automation.Components.Common.Resources
@using AuthJanitor.Automation.Components.Common.Tasks
@using AuthJanitor.Automation.Components.Modals
@using AuthJanitor.Automation.Shared.ViewModels
@code {
    protected IEnumerable<RekeyingTaskViewModel> Tasks { get; set; } = new List<RekeyingTaskViewModel>();

    protected bool ApproveModalShowing { get; set; }
    protected bool DeleteModalShowing { get; set; }

    [Parameter]
    public RekeyingTaskViewModel SelectedValue { get; set; } = new RekeyingTaskViewModel();

    [Parameter]
    public EventCallback<RekeyingTaskViewModel> SelectedValueChanged { get; set; }

    protected override Task OnInitializedAsync() => LoadData();

    protected async Task LoadData() => Tasks = await Http.AJList<RekeyingTaskViewModel>();

    protected async Task ApproveCallback()
    {
        await Http.PostAsync($"/api/tasks/{SelectedValue.ObjectId}/approve", new StringContent(string.Empty));
        await LoadData();
        ApproveModalShowing = false;
    }

    protected async Task DeleteConfirmCallback(bool result)
    {
        if (result)
        {
            await Http.AJDelete<RekeyingTaskViewModel>(SelectedValue.ObjectId);
            await LoadData();
        }
        DeleteModalShowing = false;
    }
}
