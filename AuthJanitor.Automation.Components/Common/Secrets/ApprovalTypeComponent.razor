<span class="lightUpIcon @(ShowEditControls ? "lightUpHoverable" : string.Empty) text-nowrap float-right h6 mb-0">
    <span class="border rounded border-success p-1 m-1 confirmationGroup">
        <span class="groupTitle text-success">Admin Identity</span>
        <Button title="Administrator Signs Off Just-in-Time"
                IsDisabled="@(!ShowEditControls)" Color="Color.None" Margin="Margin.Is1.OnAll" Padding="Padding.Is0.OnAll"
                Class="@GetColor(TaskConfirmationStrategies.AdminSignsOffJustInTime)"
                Clicked="@(() => UpdateFlag(TaskConfirmationStrategies.AdminSignsOffJustInTime))">
            <Icon Name="FontAwesomeIcons.PencilAlt" IconStyle="IconStyle.Solid" />
        </Button>

        <Button title="Administrator Caches Sign-Off Token"
                IsDisabled="@(!ShowEditControls)" Color="Color.None" Margin="Margin.Is1.OnAll" Padding="Padding.Is0.OnAll"
                Class="@GetColor(TaskConfirmationStrategies.AdminCachesSignOff)"
                Clicked="@(() => UpdateFlag(TaskConfirmationStrategies.AdminCachesSignOff))">
            <Icon Name="FontAwesomeIcons.StickyNote" IconStyle="IconStyle.Solid" />
        </Button>
    </span>

    <span class="border rounded border-warning p-1 m-1 confirmationGroup">
        <span class="groupTitle text-warning">Agent Identity</span>
        <Button title="AuthJanitor Agent Rekeys Just-in-Time"
                IsDisabled="@(!ShowEditControls)" Color="Color.None" Margin="Margin.Is1.OnAll" Padding="Padding.Is0.OnAll"
                Class="@GetColor(TaskConfirmationStrategies.AutomaticRekeyingAsNeeded)"
                Clicked="@(() => UpdateFlag(TaskConfirmationStrategies.AutomaticRekeyingAsNeeded))">
            <Icon Name="FontAwesomeIcons.RedoAlt" IconStyle="IconStyle.Solid" />
        </Button>

        <Button title="AuthJanitor Agent Rekeys on an Availability Schedule"
                IsDisabled="@(!ShowEditControls)" Color="Color.None" Margin="Margin.Is1.OnAll" Padding="Padding.Is0.OnAll"
                Class="@GetColor(TaskConfirmationStrategies.AutomaticRekeyingScheduled)"
                Clicked="@(() => UpdateFlag(TaskConfirmationStrategies.AutomaticRekeyingScheduled))">
            <Icon Name="FontAwesomeIcons.Clock" IconStyle="IconStyle.Solid" />
        </Button>
    </span>

    <span class="border rounded border-info p-1 m-1 confirmationGroup">
        <span class="groupTitle text-info">Other</span>
        <Button title="AuthJanitor Agent Rekeys When Prompted by an External Signal"
                IsDisabled="@(!ShowEditControls)" Color="Color.None" Margin="Margin.Is1.OnAll" Padding="Padding.Is0.OnAll"
                Class="@GetColor(TaskConfirmationStrategies.ExternalSignal)"
                Clicked="@(() => UpdateFlag(TaskConfirmationStrategies.ExternalSignal))">
            <Icon Name="FontAwesomeIcons.Flag" IconStyle="IconStyle.Solid" />
        </Button>
    </span>
</span>

@code {
    [Parameter] public TaskConfirmationStrategies Value { get; set; }
    [Parameter] public EventCallback<TaskConfirmationStrategies> ValueChanged { get; set; }

    [Parameter]
    public string SelectedColor { get; set; } = "text-success";

    [Parameter]
    public string NotSelectedColor { get; set; } = "text-dark";

    [Parameter]
    public bool ShowEditControls { get; set; } = false;

    protected string GetColor(TaskConfirmationStrategies strategy) =>
        $" {(Value.HasFlag(strategy) ? "iconLit " + SelectedColor : NotSelectedColor)}";

    protected void UpdateFlag(TaskConfirmationStrategies strategy)
    {
        if (Value.HasFlag(strategy))
            Value &= ~strategy;
        else
            Value |= strategy;
        ValueChanged.InvokeAsync(Value);
        StateHasChanged();
    }
}
