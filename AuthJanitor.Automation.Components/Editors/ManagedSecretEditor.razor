<Container>
    @foreach (var item in Resources.OrderBy(r => r.Name))
    {
        <Row>
            <Column ColumnSize="ColumnSize.IsAuto">
                @{ var color = item.IsRekeyableObjectProvider ? "text-primary" : "text-secondary"; } 
                <i class="@item.ProviderDetail.IconClass @color"></i>
            </Column>
            <Column>
                <CheckEdit CheckedChanged="@(v => UpdateObject(item.ObjectId, v))"><strong>@item.Name</strong></CheckEdit>
                <small>@item.Description</small>
            </Column>
        </Row>
    }
</Container>

<Container>
    <Row>
        <Field IsHorizontal="true" ColumnSize="ColumnSize.Is12">
            <FieldLabel ColumnSize="ColumnSize.Is4">Name</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is8"><TextEdit @bind-Text="@Value.Name" Placeholder="Secret name..." /></FieldBody>
        </Field>
    </Row>
    <Row>
        <Field IsHorizontal="true" ColumnSize="ColumnSize.Is12">
            <FieldLabel ColumnSize="ColumnSize.Is4">Description</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is8"><TextEdit @bind-Text="@Value.Description" Placeholder="Secret description..." /></FieldBody>
        </Field>
    </Row>
    <Row>
        <Field IsHorizontal="true" ColumnSize="ColumnSize.Is12">
            <FieldLabel ColumnSize="ColumnSize.Is4">Valid Period</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is8">
                <TimespanComponent @bind-Value="@Value.ValidPeriodMinutes" ShowEditControls="true" />
            </FieldBody>
        </Field>
    </Row>
    <Row>
        <Field IsHorizontal="true" ColumnSize="ColumnSize.Is12">
            <FieldLabel ColumnSize="ColumnSize.Is4">Approval Type(s)</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is8">
                <ApprovalTypeComponent @bind-Value="@Value.TaskConfirmationStrategies" ShowEditControls="true" />
            </FieldBody>
        </Field>
    </Row>
</Container>

@using AuthJanitor.Automation.Components.Common.Secrets 
@code {
    [Parameter]
    public ManagedSecretViewModel Value { get; set; }

    [Parameter]
    public EventCallback<ManagedSecretViewModel> ValueChanged { get; set; }

    protected IEnumerable<ResourceViewModel> Resources { get; set; } = new List<ResourceViewModel>();

    protected override async Task OnInitializedAsync()
    {
        Resources = await Http.AJList<ResourceViewModel>();
    }

    protected void UpdateObject(Guid objectId, bool isChecked)
    {
        var resourceIds = Value.ResourceIds.Split(';').ToList();
        if (isChecked)
            resourceIds.Add(objectId.ToString());
        else
            resourceIds.RemoveAll(r => Guid.Parse(r) == objectId);
        Value.ResourceIds = string.Join(';', resourceIds.Where(r => !string.IsNullOrEmpty(r)));
    }
}