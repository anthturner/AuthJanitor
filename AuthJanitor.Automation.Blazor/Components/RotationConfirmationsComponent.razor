<span class="lightUpIcon @(Editable ? "lightUpHoverable" : string.Empty) text-nowrap float-right h6 mb-0">
    <Button title="Administrator Signs Off Just-in-Time"
            IsDisabled="@(!Editable)" Color="Color.None" Margin="Margin.Is2.FromRight" Padding="Padding.Is0.OnAll"
            Class="@GetColor(TaskConfirmationStrategies.AdminSignsOffJustInTime)"
            Clicked="@(() => UpdateFlag(TaskConfirmationStrategies.AdminSignsOffJustInTime))">
        <Icon Name="FontAwesomeIcons.PencilAlt" IconStyle="IconStyle.Solid" />
    </Button>

    <Button title="Administrator Caches Sign-Off Token"
            IsDisabled="@(!Editable)" Color="Color.None" Margin="Margin.Is2.FromRight" Padding="Padding.Is0.OnAll"
            Class="@GetColor(TaskConfirmationStrategies.AdminCachesSignOff)"
            Clicked="@(() => UpdateFlag(TaskConfirmationStrategies.AdminCachesSignOff))">
        <Icon Name="FontAwesomeIcons.StickyNote" IconStyle="IconStyle.Solid" />
    </Button>

    <Button title="AuthJanitor Service Rekeys Just-in-Time"
            IsDisabled="@(!Editable)" Color="Color.None" Margin="Margin.Is2.FromRight" Padding="Padding.Is0.OnAll"
            Class="@GetColor(TaskConfirmationStrategies.AutomaticRekeyingAsNeeded)"
            Clicked="@(() => UpdateFlag(TaskConfirmationStrategies.AutomaticRekeyingAsNeeded))">
        <Icon Name="FontAwesomeIcons.RedoAlt" IconStyle="IconStyle.Solid" />
    </Button>

    <Button title="AuthJanitor Service Rekeys on an Availability Schedule"
            IsDisabled="@(!Editable)" Color="Color.None" Margin="Margin.Is2.FromRight" Padding="Padding.Is0.OnAll"
            Class="@GetColor(TaskConfirmationStrategies.AutomaticRekeyingScheduled)"
            Clicked="@(() => UpdateFlag(TaskConfirmationStrategies.AutomaticRekeyingScheduled))">
        <Icon Name="FontAwesomeIcons.Clock" IconStyle="IconStyle.Solid" />
    </Button>

    <Button title="AuthJanitor Service Rekeys When Prompted by an External Signal"
            IsDisabled="@(!Editable)" Color="Color.None" Margin="Margin.Is2.FromRight" Padding="Padding.Is0.OnAll"
            Class="@GetColor(TaskConfirmationStrategies.ExternalSignal)"
            Clicked="@(() => UpdateFlag(TaskConfirmationStrategies.ExternalSignal))">
        <Icon Name="FontAwesomeIcons.Flag" IconStyle="IconStyle.Solid" />
    </Button>
</span>

@using AuthJanitor.Automation.Shared
@using Blazorise
@code {
    [Parameter]
    public TaskConfirmationStrategies RotationConfirmations { get; set; }

    [Parameter]
    public string SelectedColor { get; set; } = "text-success";

    [Parameter]
    public string NotSelectedColor { get; set; } = "text-light";

    [Parameter]
    public bool Editable { get; set; } = false;

    protected string GetColor(TaskConfirmationStrategies strategy) =>
        $" {(RotationConfirmations.HasFlag(strategy) ? "iconLit " + SelectedColor : NotSelectedColor)}";

    protected void UpdateFlag(TaskConfirmationStrategies strategy)
    {
        if (RotationConfirmations.HasFlag(strategy))
            RotationConfirmations &= ~strategy;
        else
            RotationConfirmations |= strategy;
        StateHasChanged();
    }
}
