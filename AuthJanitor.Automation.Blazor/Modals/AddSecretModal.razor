<Modal @ref="modalRef">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <ModalHeader>
            <ModalTitle>Manage New Secret</ModalTitle>
            <CloseButton Clicked="@HideModal" />
        </ModalHeader>
        <ModalBody Padding="Padding.Is2.OnAll">
            <Heading Size="HeadingSize.Is5" TextColor="TextColor.Primary">Resources</Heading>
            <Blazorise.Container>
                @foreach (var item in Resources.OrderBy(r => r.Name))
                {
                    <Blazorise.Row>
                        <Blazorise.Column ColumnSize="ColumnSize.IsAuto">
                            <span class="fa-layers fa-2x fa-fw">
                                <i class="@item.ProviderDetail.IconClass"></i>
                                @*@if (item.IsRekeyableObjectProvider)
                                {
                                    <i class="fas fa-key text-warning" data-fa-transform="shrink-5 down-5 right-5"></i>
                                }
                                else
                                {
                                    <i class="fas fa-sync-alt text-success" data-fa-transform="shrink-5 down-5 right-5"></i>
                                }*@
                            </span>
                        </Blazorise.Column>
                        <Blazorise.Column>
                            <CheckEdit CheckedChanged="@(v => UpdateObject(item.ObjectId, v))"><strong>@item.Name</strong></CheckEdit>
                            <small>@item.Description</small>
                        </Blazorise.Column>
                    </Blazorise.Row>
                }
            </Blazorise.Container>
            <Blazorise.Container Padding="Padding.Is2.FromTop">
                <Field IsHorizontal="true" ColumnSize="ColumnSize.Is12">
                    <FieldLabel ColumnSize="ColumnSize.Is4">Name</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is8"><TextEdit @bind-Text="@NewSecret.Name" Placeholder="Secret name..." /></FieldBody>
                </Field>
                <Field IsHorizontal="true" ColumnSize="ColumnSize.Is12">
                    <FieldLabel ColumnSize="ColumnSize.Is4">Description</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is8"><TextEdit @bind-Text="@NewSecret.Description" Placeholder="Secret description..." /></FieldBody>
                </Field>
                <Field IsHorizontal="true" ColumnSize="ColumnSize.Is12">
                    <FieldLabel ColumnSize="ColumnSize.Is4">Valid Period</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is8">
                        <Blazorise.NumericEdit @bind-Value="@NewSecret.ValidPeriodMinutes" Placeholder="Period of validity..." />
                        <small>@ToReadableString(TimeSpan.FromMinutes(NewSecret.ValidPeriodMinutes))</small>
                    </FieldBody>
                </Field>
                <Field IsHorizontal="true" ColumnSize="ColumnSize.Is12">
                    <FieldLabel ColumnSize="ColumnSize.Is4">Confirmation Strategies</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is8">
                        <RotationConfirmationsComponent @bind-Value="@NewSecret.TaskConfirmationStrategies" Editable="true" />
                    </FieldBody>
                </Field>
            </Blazorise.Container>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
            <Button Color="Color.Primary" Clicked="@CreateSecret">Add</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
 
@using AuthJanitor.Automation.Blazor.Components 
@using Blazorise
@code {
    public IEnumerable<ResourceViewModel> Resources { get; set; } = new List<ResourceViewModel>();

    public Modal modalRef;

    public ManagedSecretViewModel NewSecret { get; set; } = new ManagedSecretViewModel();

    public List<Guid> AssociatedResources { get; set; } = new List<Guid>();

    protected override async Task OnInitializedAsync()
    {
        Resources = await Http.List<ResourceViewModel>();
    }

    protected void UpdateObject(Guid objectId, bool isChecked)
    {
        if (isChecked)
            AssociatedResources.Add(objectId);
        else
            AssociatedResources.RemoveAll(r => r == objectId);
    }

    protected async Task CreateSecret()
    {
        NewSecret.ResourceIds = AssociatedResources;
        await Http.Create<ManagedSecretViewModel>(NewSecret);

        await _onSaveAsync();

        HideModal();
    }

    private Func<Task> _onSaveAsync;
    public void ShowModal(Func<Task> onSaveAsync)
    {
        _onSaveAsync = onSaveAsync;
        modalRef.Show();
    }

    public void HideModal()
    {
        modalRef.Hide();
        _onSaveAsync = null;
        NewSecret = new ManagedSecretViewModel();
    }

    public string ToReadableString(TimeSpan span)
    {
        string formatted = string.Format("{0}{1}{2}{3}{4}",
            span.Duration().Days > 30 ? string.Format("~{0:0} month{1}, ", span.Days / 30, (span.Days / 30) == 1 ? string.Empty : "s") : string.Empty,
            span.Duration().Days > 0 ? string.Format("{0:0} day{1}, ", span.Days, span.Days == 1 ? string.Empty : "s") : string.Empty,
            span.Duration().Hours > 0 ? string.Format("{0:0} hour{1}, ", span.Hours, span.Hours == 1 ? string.Empty : "s") : string.Empty,
            span.Duration().Minutes > 0 ? string.Format("{0:0} minute{1}, ", span.Minutes, span.Minutes == 1 ? string.Empty : "s") : string.Empty,
            span.Duration().Seconds > 0 ? string.Format("{0:0} second{1}", span.Seconds, span.Seconds == 1 ? string.Empty : "s") : string.Empty);

        if (formatted.EndsWith(", ")) formatted = formatted.Substring(0, formatted.Length - 2);

        if (string.IsNullOrEmpty(formatted)) formatted = "Enter a duration in minutes.";

        return formatted;
    }
}
