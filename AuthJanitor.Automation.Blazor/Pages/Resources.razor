@layout MainLayout
@page "/resources"
@using AuthJanitor.Automation.Shared.ViewModels
@using AuthJanitor.Providers
@using BlazorTable

<Card>
    <CardHeader>
        <DisplayHeading Size="DisplayHeadingSize.Is4">Resources</DisplayHeading>
    </CardHeader>
    <CardBody>
        <BlazorTable.Table TableItem="ResourceViewModel" Items="ResourceList" TableClass="table table-striped table-bordered">
            <BlazorTable.Column TableItem="ResourceViewModel" Title="" Width="1%" Field="@(x => x.ObjectId)" Sortable="false" Filterable="false">
                <Template>
                    <Blazorise.Buttons>
                        <Blazorise.Button Color="Color.Info" Clicked="@(() => View(context.ObjectId))">
                            <Icon Name="FontAwesomeIcons.Eye" Class="text-light" />
                        </Blazorise.Button>
                        <Blazorise.Button Color="Color.Danger" Clicked="@(() => Delete(context.ObjectId))">
                            <Icon Name="FontAwesomeIcons.Trash" Class="text-light" />
                        </Blazorise.Button>
                    </Blazorise.Buttons>
                </Template>
            </BlazorTable.Column>
            <BlazorTable.Column TableItem="ResourceViewModel" Title="Name" Field="@(x => x.Name)" Sortable="true" Filterable="true" />
            <BlazorTable.Column TableItem="ResourceViewModel" Title="Description" Field="@(x => x.Description)" Sortable="true" Filterable="true" />
            <BlazorTable.Column TableItem="ResourceViewModel" Title="Provider" Field="@(x => x.ProviderDetail.Name)" Sortable="true" Filterable="true" />

            <Pager ShowPageNumber="true" ShowTotalCount="true" />
        </BlazorTable.Table>
        <Blazorise.Button Color="Color.Primary" Clicked="@addResourceModal.ShowModal">
            <Icon Name="FontAwesomeIcons.Plus" /> Add Resource
        </Blazorise.Button>
    </CardBody>
</Card>

<AddResourceModal @ref="addResourceModal" AfterCommitAsync="@LoadData" />

@using AuthJanitor.Automation.Blazor.Modals 
@code {
    public IEnumerable<ResourceViewModel> ResourceList { get; set; } = new List<ResourceViewModel>();

    protected Modals.AddResourceModal addResourceModal;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await base.OnInitializedAsync();
    }

    protected async Task LoadData()
    {
        if (addResourceModal != null) addResourceModal.ClearForm();
        ResourceList = await Http.GetJsonAsync<IEnumerable<ResourceViewModel>>("/api/resources");
    }

    protected async Task Delete(Guid objectId)
    {

    }

    protected async Task View(Guid objectId)
    {
        NavigationManager.NavigateTo($"/aj/resources/{objectId}");
    }
}
