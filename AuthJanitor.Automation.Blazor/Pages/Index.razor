@page "/"

@if (Metrics != null)
{
    <Container IsFluid="true">
        <Row Padding="Padding.Is3.OnY">
            <Column ColumnSize="ColumnSize.Is3">
                <InfoCardComponent Heading="Expiring Soon" HeadingColor="Color.Warning" Data="@($"{Metrics.TotalExpiringSoon}")" Icon="fas fa-calendar" />
            </Column>
            <Column ColumnSize="ColumnSize.Is3">
                <InfoCardComponent Heading="Expired" HeadingColor="Color.Danger" Data="@($"{Metrics.TotalExpired}")" Icon="fas fa-calendar-times" />
            </Column>
            <Column ColumnSize="ColumnSize.Is3">
                <InfoCardComponent Heading="Pending Approval" HeadingColor="Color.Success" Data="@($"{Metrics.TotalPendingApproval}")" Icon="fas fa-user-check" />
            </Column>
            <Column ColumnSize="ColumnSize.Is3">
                <InfoCardComponent Heading="Managed Secrets" HeadingColor="Color.Info" Data="@($"{Metrics.TotalSecrets}")" Icon="fas fa-unlock-alt" />
            </Column>
        </Row>
        <Row Padding="Padding.Is3.OnY">
            <Column ColumnSize="ColumnSize.Is12">
                <Card>
                    <CardHeader>Expiring Soon</CardHeader>
                    <CardBody>
                        <BlazorTable.Table TableItem="ManagedSecretViewModel" Items="@Metrics.ExpiringSoon" TableClass="table table-striped table-bordered">
                            <BlazorTable.Column TableItem="ManagedSecretViewModel" Title="Name" Field="@(x => x.Name)" Sortable="true" Filterable="true" />
                            <BlazorTable.Column TableItem="ManagedSecretViewModel" Title="Valid For" Field="@(x => x.ValidPeriod)" Sortable="true" />
                            <BlazorTable.Column TableItem="ManagedSecretViewModel" Title="Expiry" Field="@(x => x.Expiry)" Sortable="true" Filterable="true" />
                            <BlazorTable.Pager ShowPageNumber="true" ShowTotalCount="true" />
                        </BlazorTable.Table>
                    </CardBody>
                </Card>
            </Column>
        </Row>
        <Row Padding="Padding.Is3.OnY">
            <Column ColumnSize="ColumnSize.Is6">
                <Card>
                    <CardHeader>Risks</CardHeader>
                    <CardBody>
                        <Blazorise.Charts.DoughnutChart @ref="riskChart" TItem="int" />
                    </CardBody>
                </Card>
            </Column>
            <Column ColumnSize="ColumnSize.Is6">
                <Card>
                    <CardHeader>Expiry</CardHeader>
                    <CardBody>
                        <Blazorise.Charts.LineChart @ref="lineChart" TItem="double" />
                    </CardBody>
                </Card>
            </Column>
        </Row>
    </Container>
}

@using Blazorise.Charts
@code {
    protected Blazorise.Charts.DoughnutChart<int> riskChart;
    protected DashboardMetrics Metrics { get; set; }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        Metrics = await Http.GetAJConfiguredClient().GetJsonAsync<DashboardMetrics>("/api/dashboard");
    //        riskChart.Clear();
    //        riskChart.AddLabel("0", "1-35", "36-60", "61-85", ">85");
    //        riskChart.AddDataSet(new Blazorise.Charts.DoughnutChartDataset<int>()
    //        {
    //            Label = "Risks",
    //            Data = new List<int>() { Metrics.Risk0, Metrics.Risk35, Metrics.Risk60, Metrics.Risk85, Metrics.RiskOver85 },
    //            //BackgroundColor = new List<string>() { "text-success", "text-secondary", "text-primary", "text-warning", "text-danger" },
    //            //BorderColor = new List<string>() { "#fff", "#fff", "#fff", "#fff", "#fff" },
    //            BorderWidth = 2
    //        });
    //        await riskChart.Update();
    //    }
    //}

    protected override async Task OnInitializedAsync()
    {
        Metrics = await Http.GetAJConfiguredClient().GetJsonAsync<DashboardMetrics>("/api/dashboard");
    }
}

@code{
    LineChart<double> lineChart;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleRedraw();
        }
    }

    async Task HandleRedraw()
    {
        lineChart.Clear();

        lineChart.AddLabel(Labels);

        lineChart.AddDataSet(GetLineChartDataset());

        await lineChart.Update();
    }

    LineChartDataset<double> GetLineChartDataset()
    {
        return new LineChartDataset<double>
        {
            Label = "# of randoms",
            Data = RandomizeData(),
            BackgroundColor = backgroundColors,
            BorderColor = borderColors,
            Fill = true,
            PointRadius = 2,
            BorderDash = new List<int> { }
        };
    }

    string[] Labels = { "Red", "Blue", "Yellow", "Green", "Purple", "Orange" };
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

    List<double> RandomizeData()
    {
        var r = new Random(DateTime.Now.Millisecond);

        return new List<double> { r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble() };
    }
}
