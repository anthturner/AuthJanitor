@page "/managedSecrets"

<Card>
    <CardHeader>
        <DisplayHeading Size="DisplayHeadingSize.Is4">Managed Secrets</DisplayHeading>
    </CardHeader>
    <CardBody>
        <BlazorTable.Table TableItem="ManagedSecretViewModel" Items="Secrets" TableClass="table table-striped table-bordered">
            <BlazorTable.Column TableItem="ManagedSecretViewModel" Title="" Width="1%" Field="@(x => x.ObjectId)" Sortable="false" Filterable="false">
                <Template>
                    <Blazorise.Buttons>
                        <Blazorise.Button Color="Color.Info" Clicked="@(() => View(context))">
                            <Icon Name="FontAwesomeIcons.Eye" Class="text-light" />
                        </Blazorise.Button>
                        <Blazorise.Button Color="Color.Danger" Clicked="@(() => ConfirmDelete(context))">
                            <Icon Name="FontAwesomeIcons.Trash" Class="text-light" />
                        </Blazorise.Button>
                    </Blazorise.Buttons>
                </Template>
            </BlazorTable.Column>
            <BlazorTable.Column TableItem="ManagedSecretViewModel" Title="Name" Field="@(x => x.Name)" Sortable="true" Filterable="true" />
            <BlazorTable.Column TableItem="ManagedSecretViewModel" Width="1%" Title="Confirmations" Field="@(x => x.TaskConfirmationStrategies)" Sortable="true" Filterable="true">
                <Template>
                    <AuthJanitor.Automation.Blazor.Components.RotationConfirmationsComponent RotationConfirmations="@context.TaskConfirmationStrategies" />
                </Template>
            </BlazorTable.Column>
            <BlazorTable.Column TableItem="ManagedSecretViewModel" Title="Valid For" Field="@(x => x.ValidPeriod)" Sortable="true" />
            <BlazorTable.Column TableItem="ManagedSecretViewModel" Title="Expiry" Field="@(x => x.Expiry)" Sortable="true" Filterable="true" />
            <BlazorTable.Column TableItem="ManagedSecretViewModel" Title="Resources">
                <Template>
                    <ListGroup Margin="Margin.Is0.OnAll" Padding="Padding.Is0.OnAll">
                        @foreach (var resource in context.Resources)
                        {
                            <ListGroupItem>
                                <ResourceNameComponent Resource="@resource" Compact="true" ShowRiskScore="false" />
                            </ListGroupItem>
                        }
                    </ListGroup>
                </Template>
            </BlazorTable.Column>
            <Pager ShowPageNumber="true" ShowTotalCount="true" />
        </BlazorTable.Table>
        <Blazorise.Button Color="Color.Primary" Clicked="@(() => addSecretModal.ShowModal(() => { StateHasChanged(); return Task.FromResult(0); }))">
            <Icon Name="FontAwesomeIcons.Plus" /> Manage New Secret
        </Blazorise.Button>
    </CardBody>
</Card>

<AddSecretModal @ref="addSecretModal" />
<DeleteConfirmationModal @ref="deleteModal" />

@using BlazorTable
@code {
    public IEnumerable<ManagedSecretViewModel> Secrets { get; set; }

    protected Modals.AddSecretModal addSecretModal;
    protected Modals.DeleteConfirmationModal deleteModal;

    protected override async Task OnInitializedAsync() => Secrets = await Http.List<ManagedSecretViewModel>();
    protected void ConfirmDelete(ManagedSecretViewModel secret) => deleteModal.ShowModal(secret.ObjectId, secret.Name, (id) => Http.Delete<ManagedSecretViewModel>(id).ContinueWith(t => this.StateHasChanged()));
    protected void View(ManagedSecretViewModel secret) => NavigationManager.NavigateTo($"/aj/managedSecrets/{secret.ObjectId}");
}
