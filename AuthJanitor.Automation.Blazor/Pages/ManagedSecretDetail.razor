@page "/managedSecrets/{ObjectId}"

@if (Secret != null)
{
<Card Margin="Margin.Is4.FromBottom">
    <CardHeader Padding="Padding.Is2.OnY">
        <Heading Size="HeadingSize.Is5" Class="font-weight-bold" Margin="Margin.Is0">Managed Secret Detail</Heading>
    </CardHeader>
    <CardBody>
        <Heading Size="HeadingSize.Is6" Class="font-weight-bold">ID<span class="float-right text-muted">@Secret.ObjectId</span></Heading>
        <Heading Size="HeadingSize.Is6" Class="font-weight-bold">Current Nonce<span class="float-right text-muted">@Secret.Nonce</span></Heading>
        <Heading Size="HeadingSize.Is6" Class="font-weight-bold">Name<span class="float-right text-muted">@Secret.Name</span></Heading>
        <Heading Size="HeadingSize.Is6" Class="font-weight-bold">Providers<span class="float-right text-muted">@Secret.ProviderSummary</span></Heading>
        <Heading Size="HeadingSize.Is6" Class="font-weight-bold">Last Changed<span class="float-right text-muted">@Secret.LastChanged</span></Heading>
        <Heading Size="HeadingSize.Is6" Class="font-weight-bold">Expires<span class="float-right text-muted">@Secret.Expiry</span></Heading>

        @{
            Background barColor;
            if (ExpiryPercent > 90) barColor = Background.Danger;
            else if (ExpiryPercent > 75) barColor = Background.Warning;
            else barColor = Background.Success;
        }

        <Progress Margin="Margin.Is3.FromBottom" Size="Size.Small">
            <ProgressBar Background="@barColor" Value="@ExpiryPercent" />
        </Progress>

        <Heading Size="HeadingSize.Is6" Class="font-weight-bold">Rotation Confirmations<span class="float-right"><AuthJanitor.Automation.Blazor.Components.RotationConfirmationsComponent RotationConfirmations="@Secret.TaskConfirmationStrategies" /></span></Heading>
    </CardBody>
</Card>

<Accordion>
    @foreach (var resource in Secret.Resources)
    {
        <Card>
            <CardHeader>
                <ResourceNameComponent Resource="@resource" ShowRiskScore="true" />
            </CardHeader>
            <CardBody Padding="Padding.Is2.OnAll">
                <Container Padding="Padding.Is0.OnAll">
                    <Row Margin="Margin.Is3.FromBottom">
                        <Column>
                            <Card>
                                <CardHeader Padding="Padding.Is1.OnY">
                                    <Heading Size="HeadingSize.Is5" TextColor="TextColor.Info" Margin="Margin.Is0.OnAll" Class="font-weight-bold">Settings</Heading>
                                </CardHeader>
                                <CardBody>
                                    <ProviderSettingsComponent Configuration="@resource.ProviderConfiguration" />
                                </CardBody>
                            </Card>
                        </Column>
                        <Column>
                            <Card Margin="Margin.Is2.FromBottom">
                                <CardHeader Padding="Padding.Is1.OnY">
                                    <Heading Size="HeadingSize.Is5" TextColor="TextColor.Warning" Margin="Margin.Is0.OnAll" Class="font-weight-bold">Risks</Heading>
                                </CardHeader>
                                <CardBody>
                                    <RiskListComponent Risks="@resource.Risks" />
                                </CardBody>
                            </Card>
                            <Card>
                                <CardHeader Padding="Padding.Is1.OnY">
                                    <Heading Size="HeadingSize.Is5" TextColor="TextColor.Info" Margin="Margin.Is0.OnAll" Class="font-weight-bold">Action Description</Heading>
                                </CardHeader>
                                <CardBody>
                                    @if (string.IsNullOrEmpty(resource.RuntimeDescription))
                                    {
                                        <code>Provider does not describe its actions!</code>
                                    }
                                    else
                                    {
                                        <code>@resource.RuntimeDescription</code>
                                    }
                                </CardBody>
                            </Card>
                        </Column>
                    </Row>
                </Container>
            </CardBody>
        </Card>
    }
</Accordion>
}

@using AuthJanitor.Automation.Blazor.Components 
@code {
    public ManagedSecretViewModel Secret { get; set; }

    [Parameter]
    public string ObjectId { get; set; }

    public TimeSpan DurationSoFar => DateTime.Now - Secret.LastChanged;

    public int ExpiryPercent => 
        DurationSoFar > Secret.ValidPeriod ?
        100 :
        (int)Math.Round((Secret.ValidPeriod.TotalMinutes / DurationSoFar.TotalMinutes) * 100);

    protected override async Task OnInitializedAsync()
    {
        Secret = await Http.GetJsonAsync<ManagedSecretViewModel>($"/api/secrets/{ObjectId}");
        await base.OnInitializedAsync();
    }
}
